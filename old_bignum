#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include "bignum.hpp"

//
// A Bignum is just a std::vector containing digits in the range 0-9, following the decimal
// convention that a number other than 0 has no leading 0's.  Oddly, that one rule made the
// code unexpectedly complicated; it would have been easier to just allow numbers like 0002!
//

Bignum::Bignum()
{
}

Bignum::Bignum(const Bignum& b)
{
	digits = b.digits;
}

Bignum::Bignum(int d)
{
	digits.push_back(d);
}

// const Bignum BZero(0);
// const Bignum BOne(1);

Bignum::Bignum(std::string s)
{
	for(auto c: s)
		digits.push_back(c-'0');
}

std::vector<int> Bignum::as_vec() const
{
	return digits;
}

std::string Bignum::to_string() const
{
	std::string s;
	for(auto d: digits)
	{
		s += std::to_string(d);
	}
	return s;
}

bool Bignum::operator<(const Bignum& b) const
{
	int alen = digits.size();
	int blen = b.digits.size();
	int aindex = 0, bindex = 0;
	if(alen > blen)
	{
		return false;
	}
	if(blen > alen)
	{
		return true;
	}
	while(alen-- > 0)
	{
		if(digits[aindex] > b.digits[bindex])
		{
			return false;
		}
		if(digits[aindex++] < b.digits[bindex++])
		{
			return true;
		}
	}
	return false;
}

bool Bignum::operator>(const Bignum& b) const
{
	return b<*this;
}

bool Bignum::operator==(const Bignum& b) const
{
	return ! (*this<b || b<*this);
}

bool Bignum::operator<=(const Bignum& b) const
{
	return ! (*this>b);
}

bool Bignum::operator>=(const Bignum& b) const
{
	return ! (*this<b);
}

bool Bignum::operator!=(const Bignum& b) const
{
	return ! (*this==b);
}

Bignum Bignum::operator+(const Bignum& b) const
{
	Bignum res;
	int alen = digits.size();
	int blen = b.digits.size();
	int aindex = 0, bindex = 0;
	while(alen > blen)
	{
		res.digits.push_back(digits[aindex++]);
		--alen;
	}
	while(blen > alen)
	{
		res.digits.push_back(b.digits[bindex++]);
		--blen;
	}
	while(alen-- > 0)
	{
		res.digits.push_back(digits[aindex++] + b.digits[bindex++]);
	}
	int rlen = res.digits.size();
	int carry = 0;
	while(rlen > 0)
	{
		carry += res.digits[--rlen];
		res.digits[rlen] = carry%10;
		carry /= 10;
	}
	if (OPT3) {
		std::vector<int> temp;
		while(carry > 0)
		{
			temp.push_back(carry%10);
			carry /= 10;
		}
		std::reverse(temp.begin(), temp.end());
		res.digits.insert(res.digits.begin(), temp.begin(), temp.end());
	}
	else {
		while(carry > 0)
		{
			res.digits.emplace(res.digits.begin(), carry%10);
			carry /= 10;
		}
	}
	return res;
}

Bignum Bignum::operator-(const Bignum& b) const
{
	Bignum res;
	int alen = digits.size();
	int blen = b.digits.size();
	if(*this < b)
	{
		return BZero;
	}
	int borrow = 0;
	int zeros = 0;
	while(alen > 0 && blen > 0)
	{
		int d = digits[--alen]-b.digits[--blen]-borrow;
		borrow = 0;
		if(d < 0)
		{
			d += 10;
			borrow = 1;
		}
		if(d == 0)
		{
			++zeros;
		}
		else
		{
			if (OPT3) {
				std::vector<int> temp(zeros+1, 0);
				temp[0] = d;
				zeros = 0;
				res.digits.insert(res.digits.begin(), temp.begin(), temp.end());
			}
			else {
				while(zeros--)
				{
					res.digits.emplace(res.digits.begin(), 0);
				}
				zeros = 0;
				res.digits.emplace(res.digits.begin(), d);
			}
		}
	}
	while(alen > 0)
	{
		int d = digits[--alen]-borrow;
		borrow = 0;
		if(d < 0)
		{
			d += 10;
			borrow = 1;
		}
		if(d == 0)
		{
			++zeros;
		}
		else
		{
			if (OPT3) {
				std::vector<int> temp(zeros+1, 0);
				temp[0] = d;
				zeros = 0;
				res.digits.insert(res.digits.begin(), temp.begin(), temp.end());
			}
			else {
				while(zeros--)
				{
					res.digits.emplace(res.digits.begin(), 0);
				}
				zeros = 0;
				res.digits.emplace(res.digits.begin(), d);
			}
		}
	}
	if(res.digits.size() == 0)
	{
		return BZero;
	}
	return res;
}

// Helper procedure to multiple a Bignum by an integer.  This could be just a single
// digit, but in fact it will sometimes be 10 in my code.  We multiple all the digits
// first, then sweep from low to high digit applying the carries.
Bignum Bignum::operator*(int d) const
{
	if(d == 0)
	{
		return BZero;
	}
	if(d == 1)
	{
		return *this;
	}
	Bignum res;
	int alen = digits.size();
	int aindex = 0;
	while(alen--)
	{
		res.digits.push_back(digits[aindex++] * d);
	}
	int carry = 0;
	while(aindex-- > 0)
	{
		carry += res.digits[aindex];
		res.digits[aindex] = carry%10;
		carry /= 10;
	}
	if (OPT3) {
		std::vector<int> temp;
		while(carry > 0)
		{
			temp.push_back(carry%10);
			carry /= 10;
		}
		std::reverse(temp.begin(), temp.end());
		res.digits.insert(res.digits.begin(), temp.begin(), temp.end());
	}
	else {
		while(carry > 0)
		{
			res.digits.emplace(res.digits.begin(), carry%10);
			carry /= 10;
		}
	}
	return res;
}

Bignum Bignum::operator*(const Bignum& b) const
{
	int blen = b.digits.size();
	Bignum tmp = *this;
	Bignum res = BZero;
	while(blen > 0)
	{
		int d = b.digits[--blen];
		if(d == 1)
		{
			res = res + tmp;
		}
		else if(d != 0)
		{
			res = res + tmp*d;
		}
		if(blen > 0)
		{
			tmp = tmp*10;
		}
	}
	return res;
}

std::pair<Bignum, Bignum> Bignum::divmod(const Bignum& b) const
{
	// first: division result, second: modulus result
	std::pair<Bignum, Bignum> divmod_result;
	if(b > *this)
	{
		divmod_result.first = BZero;
		divmod_result.second = *this;
		return divmod_result;
	}
	if(b == *this)
	{
		divmod_result.first = BOne;
		divmod_result.second = BZero;
		return divmod_result;
	}
	if(b == BZero)
	{
		std::cout << "Error: Divide by 0" << std::endl;
		exit(1);
	}
	Bignum res;
	Bignum tmp;
	int alen = digits.size();
	int blen = b.digits.size();
	int aindex = 0;
	bool placed_first = false;
	while(aindex < blen)
	{
		int d = digits[aindex++];
		if(d != 0 || placed_first)
		{
			tmp.digits.push_back(d);
			placed_first = true;
		}
	}
	if(!placed_first)
	{
		tmp = BZero;
	}
	bool first = true;
	do
	{
		int d = 0;
		if(b > tmp && aindex < alen)
		{
			d = digits[aindex++];
			if(d != 0 || tmp != BZero)
			{
				if(tmp == BZero)
				{
					tmp.digits[0] = d;	
				}
				else
				{
					tmp.digits.push_back(d);
				}
			}
		}
		d = 0;
		while(b <= tmp)
		{
			++d;
			tmp = tmp-b;
		}
		if(d != 0 || !first)
		{
			first = false;
			res.digits.push_back(d);
		}
	}
	while(aindex < alen);
	if(res.digits.size() == 0)
	{
		divmod_result.first = BZero;
		divmod_result.second = BZero;
		return divmod_result;
	}
	divmod_result.first = res;
	divmod_result.second = tmp;
	return divmod_result;
}

Bignum Bignum::operator/(const Bignum& b) const
{
	return divmod(b).first;
}

Bignum Bignum::operator%(const Bignum& b) const
{
	if (OPT2) {
		return divmod(b).second;
	}
	return *this - (*this/b)*b;
}

Bignum Bignum::expmod(Bignum exp, const Bignum& mod) const
{
	if(exp == BZero)
	{
		return BOne;
	}
	Bignum two = Bignum(2);
	Bignum res = BOne;
	Bignum tmp = *this;
	while(exp > 0)
	{
		// Idea 1: use bitwise and instead of modulus operator
		if (OPT1) {
			if(!is_even(exp)) {
				res = res*tmp;
				res = res % mod;
			}
		}

		else {
			if(exp % two == BOne) {
				res = res*tmp;
				res = res % mod;
			}
		}
		tmp = tmp*tmp % mod;
		exp = exp/two;

	}
	return res;
}

Bignum Bignum::gcd(const Bignum& b) const
{
	if (b == BZero)
		return *this;
	return b.gcd(*this % b);
}

Bignum Bignum::encrypt(std::string rsa_n, std::string rsa_e) const
{
	return expmod(Bignum(rsa_e), Bignum(rsa_n)).to_string();
}

Bignum Bignum::decrypt(std::string rsa_n, std::string rsa_d) const
{
	return expmod(Bignum(rsa_d), Bignum(rsa_n));
}

bool Bignum::is_even(const Bignum& num) const
{
	if (num.digits.empty()){
		return false;
	}
	return num.digits.back() % 2 == 0;
}